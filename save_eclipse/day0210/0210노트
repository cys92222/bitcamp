질문) doGet을 써야할지, doPost를 써야할지 잘 모르겠어요?

==> get방식으로 요청할때는 doGet을 사용하고, post 방식으로 요청할때는 doPost를 사용해요.

==> 어떨때가 get방식이고 어떨때가 post 방식인가요? 
	
	<form action="" method="post">
	일때만 post 방식이고 나머지는 모두 get방식입니다.

=============================================================================================

<< jsp 내장객체 >>
	jsp 문서에서 사용자가 객체를 생성하지 않아도 
	기본적으로 사용할 수 있는 객체들을 말합니다. 
	
	request		: 사용자의 요청정보를 담고 있는 객체
	response	: 응답을 위한 객체
	session		: 상태유지를 위한 객체
	out			: 출력담당을 위한 객체
	exception 	: 예외의 정보를 갖고 있는 객체이며, 일반적으로는 생성되지 않는다.
				  page 지시자의 isErrorPage="true" 라고 했을때만 나타나는 내장객체.
	......
	
	==> 사실은 이것들은 서블릿의 로컬 변수들입니다. 

======================================================================================================

jsp문서에서 예외처리 

jsp문서에서 일반적으로 다음과 같은 오류가 빈번하게 발생됩니다.

자바문법오류가 발생했을때의 오류코드는 500오류입니다.
또, 존재하지 않는 문서를 요청했을때의 오류코드는 404오류 입니다. 

이 두가지에 대한 오류를 오류에 대한 처리를 web.xml에 다음과 같이 설정하여 한번에 처리할 수 있어요,
	<error-page>
  	<error-code>500</error-code>
 	<location>/error500.jsp</location>
  </error-page>
  
  <error-page>
  	<error-code>404</error-code>
 	<location>/error404.jsp</location>
  </error-page>
	
==============================================================================================

<< 상태유지기법 >>

웹 문서의 통신규약인 http프로토콜은 "무상태서버"입니다. 
"무상태서버"라고 하는 것은 말그대로 상태가 유지되지 않는 것입니다.
인터넷 상에서 즉, 우리가 말하는 인터넷이란 웹을 이야기 하는데요.
웹에서 문서를 주고 받는 규약을 http라고 합니다. 
예를들어 http://naver.com 에 접속하면 늘 언제나 네트워크에 연결된것처럼 보이지만
사실은 그렇지 않아요. 
웹 어플리케이션은 말이죠. 한번 요청에 의해 응답을 하고 연결이 끊기는 구조입니다.
늘 언제나 연결이 된다고 생각해보세요. 서버가 얼마나 부담이 많겠습니까. 

그러니 웹어플리케이션 입장에서는 사용자의 "상태:를 유지시키기 위한 기법이 필요해요.

이사람이 "로그인을 했는가" "안했는가" 
이사람이 투표를 했는가" "안했는가"
또 이사람이 "몇번째 방문인가?" 등 여러가지 
그 사용자의 상태를 유지시키기 위한 기법이 필요해요. 

쿠키		: 사용자의 상태를 사용자 컴퓨터에 기록하는 방식
				쿠키는 사용자가 임의로 삭제할 수 있어. 보안유지상 중요한 정보를 기록하기에는 부적합해요.
				또, 쿠키는 문자열밖에 저장할 수 없어요. 
				
				
세션		: 사용자의 상태를 서버에 기록하는 방식 
				내장객체로 제공되어요!
				또, String뿐 아니라 온갖자료형을 session에 저장 할 수 있어요.
				내장객체로 사용해야지만 상태유지가 됩니다.
				만약 사용자가 직접 생성을 해버리면 상태유지로 사용할 수 없어요.

===========================================================================================================

<< 쿠키의 기록 >> 

Cookie 변수명 = new Cookie("쿠키이름","값");

response.addCookie(쿠키변수명);

<< 쿠키를 읽어오기 >> 

Cookie []cookies = request.getCookies();

for(Cookie co : cookies){
	if( co.getName().equals("쿠키이름") ){
		String v = co.getValue();
	}
}





	
	
	
	
	
	
	
	
	
	
	
	
	
	