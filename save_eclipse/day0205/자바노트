** 메소드 오버로딩에 대하여 설명하세요.	(메소드 중복)
	같은이름의 메소드를 중복하여 정의하는 것을 말합니다. 
	이를 위해서는 매개변수의 개수가 다르거나 자료형이 달라야 해요. 


** 메소드 오버라이딩에 대하여 설명하세요.
	상속관계에 있을때 부모의 메소드를 자식클래스에 맞도록
	재정의하는 것을 말합니다. 
	이를 위해서는 메소드 이름 뿐 아니라 매개변수의 개수와 자료형까지 일치되게 재정의 해야합니다. 


====================================================================================================

** 자바세상에서 모든클래스들은 Object의 후손입니다. 

예를 들어 다음과 같은 클래스 정의가 있다고 가정합시다. 

class Person{							<<===== class Person extends Object
	private String name;
	private int age;
}


위에서 정의한 Person은 Object의 후손입니다. 
따라서 필요하다면, Object의 메소드를 Person에 맞도록 재정의할 수 있어요!

일반적으로 Object의 메소드 중에 
	toString(), equal()메소드를 자식클래스에 맞도록 재정의를 많이 합니다.


** toString(), equals()메소드에 대하여 아는데로 설명해보세요.
toString()
각기다른 자료형을 스트링으로 변환해주는 메소드
equals()


====================================================================================================

** 추상클래스
	미래에 만들어질 후손들이 가져야할 속성과 동작을 일반화 함에 있어 
	어떠한 메소드를 구체화할 수 없는 경우에 메소드 선언부만 명시해요. 
	이러한 메소드를 추상메소드라 하며 추상 메소드를 하나라도 갖고있는 클래스는 추상클래스가 되어야 합니다.
	추상메소드와 추상클래스 앞에 abstract 키워드를 붙여야 합니다. 


** 인터페이스
	자바는 클래스의 다중 상속이 금지되어 있습니다. 
	다중상속의 효과를 기대할 목적으로 인터페이스를 이용합니다. 
	인터페이스는 완전 추상의 개념으로 추상 클래스와 달리 추상 메소드와 상수만으로 
	구성되어야 합니다. 
	메소드 명앞에 abstract을 생략해도 됩니다. 상수명앞에 final을 생략해도 됩니다. 
======================================================================================================

** 자바의 컬렉션 프레임워크의 종류

Set		==> 데이터의 중복을 허용하지 않아요.
List	==> 데이터의 중복을 허용해요.
Map		==> key와 value가 한쌍으로 이루어진 자료구조이며 
			key를 통해 데이터에 접근해요. 

----------------------------------------------------------------------------------------------------

public class LottoTEST {
	public static void main(String[] args) {
		TreeSet lotto = new TreeSet();
		//로또 번호는 중복이 되지 않아야 하므로, set을 생성해요.
		//set의 특징은 중복을 허용하지 않기때문에 새로운 데이터를 추가할 때 이미 그 값이
		//set에 있다면 담지 않아요. 
		
		Random r = new Random();
		//1~45사이의 무작위 수 (난수)를 만들기 위한 객체를 생성해요.
		
		while (true) {			//계속 (끝없이) 반복 실행해요.
			lotto.add(r.nextInt(45) + 1);
			if (lotto.size() >= 6) { //만약에 set이름인 lotto에 담긴 수가 6개 이상이면
				break;				//반복문을 탈출해요.
			}
		}
		System.out.println(lotto);
		//set의 변수인 lotto에 담긴 6개의 숫자를 출력해요.
		//TreeSet에 toString()이 자신에게 맞도록 재정의 되어 있어요. 
		System.out.println(lotto.toString());
	}
}

------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
<< instance of 연산자 >> 
 
is a 관계에 있는지 판별하는 연산자 입니다. 
어떠한 참조변수가 특정클래스의 자료형인지 판별하는 연산자입니다. 



















